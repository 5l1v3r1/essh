package essh

import (
	"bytes"
	"github.com/yuin/gopher-lua"
	"sort"
	"text/template"
)

type Host struct {
	Name        string
	Config      *lua.LTable
	Props       map[string]string
	Hooks       map[string][]interface{}
	Description string
	Hidden      bool
	Tags   []string
	Context *Context
	Private bool
}

var Hosts map[string]*Host = map[string]*Host{}
var PublicHosts map[string]*Host = map[string]*Host{}

func (h *Host) SSHConfig() []map[string]string {
	values := []map[string]string{}

	var names []string

	h.Config.ForEach(func(k lua.LValue, v lua.LValue) {
		if keystr, ok := toString(k); ok {
			names = append(names, keystr)
		}
	})

	sort.Strings(names)

	for _, name := range names {
		lvalue := h.Config.RawGetString(name)
		if svalue, ok := toString(lvalue); ok {
			// can use only string value.
			value := map[string]string{name: svalue}
			values = append(values, value)
		}
	}

	return values
}

func (h *Host) DescriptionOrDefault() string {
	if h.Description == "" {
		return h.Name + " host"
	}

	return h.Description
}

func (h *Host) Scope() string {
	if h.Private {
		return "private"
	} else {
		return "public"
	}
}

func (h *Host) Key() string {
	return h.Context.TypeString() + ":" + h.Name
}

func GetPublicHost(hostname string) *Host {
	return PublicHosts[hostname]
}

func SortedHosts() []*Host {
	names := []string{}
	hosts := []*Host{}

	for name, _ := range Hosts {
		names = append(names, name)
	}

	sort.Strings(names)

	for _, name := range names {
		hosts = append(hosts, Hosts[name])
	}

	return hosts
}

func SameContextHosts(contextType int) []*Host {
	hosts := []*Host{}

	for _, host := range SortedHosts() {
		if host.Context.Type == contextType {
			hosts = append(hosts, host)
		}
	}

	return hosts
}

var hostsTemplate = `# Generated by using https://github.com/kohkimakimoto/essh
# Don't edit this file manually.
{{range $i, $host := .Hosts}}
Host {{$host.Name}}{{range $ii, $param := $host.SSHConfig}}{{range $k, $v := $param}}
    {{$k}} {{$v}}{{end}}{{end}}
{{end}}
`

func GenHostsConfig(enabledHosts []*Host) ([]byte, error) {
	tmpl, err := template.New("T").Parse(hostsTemplate)
	if err != nil {
		return nil, err
	}

	input := map[string]interface{}{"Hosts": enabledHosts}
	var b bytes.Buffer
	if err := tmpl.Execute(&b, input); err != nil {
		return nil, err
	}

	return b.Bytes(), nil
}

func Tags() []string {
	tagsMap := map[string]string{}
	tags := []string{}

	for _, host := range Hosts {
		for _, t := range host.Tags {
			if _, exists := tagsMap[t]; !exists {
				tagsMap[t] = t
				tags = append(tags, t)
			}
		}
	}

	sort.Strings(tags)

	return tags
}

func FindHosts(names []string, contextType int) []*Host {
	var hosts = []*Host{}

	for _, host := range SortedHosts() {
		if host.Context.Type != contextType {
			continue
		}

		B1:
		for _, name := range names {
			if host.Name == name {
				hosts = append(hosts, host)
				break B1
			}
		}

		B2:
		for _, tag := range host.Tags {
			for _, name := range names {
				if tag == name {
					hosts = append(hosts, host)
					break B2
				}
			}
		}
	}

	return hosts
}

func HostsByNames(names []string) []*Host {
	var hosts = []*Host{}

	for _, host := range SortedHosts() {
	B1:
		for _, name := range names {
			if host.Name == name {
				hosts = append(hosts, host)
				break B1
			}
		}

	B2:
		for _, tag := range host.Tags {
			for _, name := range names {
				if tag == name {
					hosts = append(hosts, host)
					break B2
				}
			}
		}
	}

	return hosts
}

func ResetHosts() {
	Hosts = map[string]*Host{}

}
